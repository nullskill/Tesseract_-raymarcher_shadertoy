// Created by David Gallardo - xjorma/2020
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0
// This shader was taken from ShaderToy
// Origin of Shader: https://www.shadertoy.com/view/wsSfzy

/// Wont work since get issues w/ some functions

/// Variables
uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iTime;                 // shader playback time (in seconds)
uniform float     iTimeDelta;            // render time (in seconds)
uniform float     iFrameRate;            // shader frame rate
uniform int       iFrame;                // shader playback frame
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform sampler2D iChannel0;             // input channel. XX = 2D/Cube
out vec4 fragColor;

const int numVertices = 160;

const vec4 vertices[160] = vec4[](
vec4(0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(0.573492586613, -0.186338871717, -0.789344370365, 0.3), 
vec4(0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(-0.354437857866, 0.48784211278, -0.78934431076, 0.3), 
vec4(0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(0.573492586613, 0.789345026016, -0.186338797212, 0.3), 
vec4(0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(0.0, -0.603005826473, -0.78934442997, 0.3), 
vec4(0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(0.927930414677, -0.301502913237, -0.186338871717, 0.3), 
vec4(0.0, -0.603005826473, -0.78934442997, 0.3), vec4(-0.573492586613, -0.186338871717, -0.789344370365, 0.3), 
vec4(0.0, -0.603005826473, -0.78934442997, 0.3), vec4(0.0, -0.975683927536, -0.18633890152, 0.3), 
vec4(-0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(-0.354437857866, 0.48784211278, -0.78934431076, 0.3), 
vec4(-0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(-0.927930414677, -0.301502913237, -0.186338871717, 0.3), 
vec4(-0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(-0.573492586613, 0.789345026016, -0.186338797212, 0.3), 
vec4(-0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(0.0, 0.975683867931, 0.18633890152, 0.3), 
vec4(-0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(-0.927930414677, 0.301502913237, 0.186338871717, 0.3), 
vec4(-0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(-0.573492586613, -0.789345026016, 0.186338797212, 0.3), 
vec4(-0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(-0.927930414677, 0.301502913237, 0.186338871717, 0.3), 
vec4(0.0, -0.975683927536, -0.18633890152, 0.3), vec4(0.573492586613, -0.789345026016, 0.186338797212, 0.3), 
vec4(0.0, -0.975683927536, -0.18633890152, 0.3), vec4(-0.573492586613, -0.789345026016, 0.186338797212, 0.3), 
vec4(0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(0.927930414677, 0.301502913237, 0.186338871717, 0.3), 
vec4(0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(0.573492586613, -0.789345026016, 0.186338797212, 0.3), 
vec4(0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(0.0, 0.975683867931, 0.18633890152, 0.3), 
vec4(0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(0.927930414677, 0.301502913237, 0.186338871717, 0.3), 
vec4(0.0, 0.975683867931, 0.18633890152, 0.3), vec4(0.0, 0.603005826473, 0.78934442997, 0.3), 
vec4(-0.927930414677, 0.301502913237, 0.186338871717, 0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, 0.3), 
vec4(-0.573492586613, -0.789345026016, 0.186338797212, 0.3), vec4(-0.354437857866, -0.48784211278, 0.78934431076, 0.3), 
vec4(0.573492586613, -0.789345026016, 0.186338797212, 0.3), vec4(0.354437857866, -0.48784211278, 0.78934431076, 0.3), 
vec4(0.927930414677, 0.301502913237, 0.186338871717, 0.3), vec4(0.573492586613, 0.186338871717, 0.789344370365, 0.3), 
vec4(0.0, 0.603005826473, 0.78934442997, 0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, 0.3), 
vec4(0.0, 0.603005826473, 0.78934442997, 0.3), vec4(0.573492586613, 0.186338871717, 0.789344370365, 0.3), 
vec4(0.573492586613, 0.186338871717, 0.789344370365, 0.3), vec4(0.354437857866, -0.48784211278, 0.78934431076, 0.3), 
vec4(0.354437857866, -0.48784211278, 0.78934431076, 0.3), vec4(-0.354437857866, -0.48784211278, 0.78934431076, 0.3), 
vec4(-0.354437857866, -0.48784211278, 0.78934431076, 0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, 0.3), 
vec4(0.354437857866, 0.48784211278, -0.78934431076, -0.3), vec4(0.573492586613, -0.186338871717, -0.789344370365, -0.3), 
vec4(0.354437857866, 0.48784211278, -0.78934431076, -0.3), vec4(-0.354437857866, 0.48784211278, -0.78934431076, -0.3), 
vec4(0.354437857866, 0.48784211278, -0.78934431076, -0.3), vec4(0.573492586613, 0.789345026016, -0.186338797212, -0.3), 
vec4(0.573492586613, -0.186338871717, -0.789344370365, -0.3), vec4(0.0, -0.603005826473, -0.78934442997, -0.3), 
vec4(0.573492586613, -0.186338871717, -0.789344370365, -0.3), vec4(0.927930414677, -0.301502913237, -0.186338871717, -0.3), 
vec4(0.0, -0.603005826473, -0.78934442997, -0.3), vec4(-0.573492586613, -0.186338871717, -0.789344370365, -0.3), 
vec4(0.0, -0.603005826473, -0.78934442997, -0.3), vec4(0.0, -0.975683927536, -0.18633890152, -0.3), 
vec4(-0.573492586613, -0.186338871717, -0.789344370365, -0.3), vec4(-0.354437857866, 0.48784211278, -0.78934431076, -0.3), 
vec4(-0.573492586613, -0.186338871717, -0.789344370365, -0.3), vec4(-0.927930414677, -0.301502913237, -0.186338871717, -0.3), 
vec4(-0.354437857866, 0.48784211278, -0.78934431076, -0.3), vec4(-0.573492586613, 0.789345026016, -0.186338797212, -0.3), 
vec4(-0.573492586613, 0.789345026016, -0.186338797212, -0.3), vec4(0.0, 0.975683867931, 0.18633890152, -0.3), 
vec4(-0.573492586613, 0.789345026016, -0.186338797212, -0.3), vec4(-0.927930414677, 0.301502913237, 0.186338871717, -0.3), 
vec4(-0.927930414677, -0.301502913237, -0.186338871717, -0.3), vec4(-0.573492586613, -0.789345026016, 0.186338797212, -0.3), 
vec4(-0.927930414677, -0.301502913237, -0.186338871717, -0.3), vec4(-0.927930414677, 0.301502913237, 0.186338871717, -0.3), 
vec4(0.0, -0.975683927536, -0.18633890152, -0.3), vec4(0.573492586613, -0.789345026016, 0.186338797212, -0.3), 
vec4(0.0, -0.975683927536, -0.18633890152, -0.3), vec4(-0.573492586613, -0.789345026016, 0.186338797212, -0.3), 
vec4(0.927930414677, -0.301502913237, -0.186338871717, -0.3), vec4(0.927930414677, 0.301502913237, 0.186338871717, -0.3), 
vec4(0.927930414677, -0.301502913237, -0.186338871717, -0.3), vec4(0.573492586613, -0.789345026016, 0.186338797212, -0.3), 
vec4(0.573492586613, 0.789345026016, -0.186338797212, -0.3), vec4(0.0, 0.975683867931, 0.18633890152, -0.3), 
vec4(0.573492586613, 0.789345026016, -0.186338797212, -0.3), vec4(0.927930414677, 0.301502913237, 0.186338871717, -0.3), 
vec4(0.0, 0.975683867931, 0.18633890152, -0.3), vec4(0.0, 0.603005826473, 0.78934442997, -0.3), 
vec4(-0.927930414677, 0.301502913237, 0.186338871717, -0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, -0.3), 
vec4(-0.573492586613, -0.789345026016, 0.186338797212, -0.3), vec4(-0.354437857866, -0.48784211278, 0.78934431076, -0.3), 
vec4(0.573492586613, -0.789345026016, 0.186338797212, -0.3), vec4(0.354437857866, -0.48784211278, 0.78934431076, -0.3), 
vec4(0.927930414677, 0.301502913237, 0.186338871717, -0.3), vec4(0.573492586613, 0.186338871717, 0.789344370365, -0.3), 
vec4(0.0, 0.603005826473, 0.78934442997, -0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, -0.3), 
vec4(0.0, 0.603005826473, 0.78934442997, -0.3), vec4(0.573492586613, 0.186338871717, 0.789344370365, -0.3), 
vec4(0.573492586613, 0.186338871717, 0.789344370365, -0.3), vec4(0.354437857866, -0.48784211278, 0.78934431076, -0.3), 
vec4(0.354437857866, -0.48784211278, 0.78934431076, -0.3), vec4(-0.354437857866, -0.48784211278, 0.78934431076, -0.3), 
vec4(-0.354437857866, -0.48784211278, 0.78934431076, -0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, -0.3), 
vec4(0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(0.354437857866, 0.48784211278, -0.78934431076, -0.3), 
vec4(0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(0.573492586613, -0.186338871717, -0.789344370365, -0.3), 
vec4(0.0, -0.603005826473, -0.78934442997, 0.3), vec4(0.0, -0.603005826473, -0.78934442997, -0.3), 
vec4(-0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(-0.573492586613, -0.186338871717, -0.789344370365, -0.3), 
vec4(-0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(-0.354437857866, 0.48784211278, -0.78934431076, -0.3), 
vec4(-0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(-0.573492586613, 0.789345026016, -0.186338797212, -0.3), 
vec4(-0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(-0.927930414677, -0.301502913237, -0.186338871717, -0.3), 
vec4(0.0, -0.975683927536, -0.18633890152, 0.3), vec4(0.0, -0.975683927536, -0.18633890152, -0.3), 
vec4(0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(0.927930414677, -0.301502913237, -0.186338871717, -0.3), 
vec4(0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(0.573492586613, 0.789345026016, -0.186338797212, -0.3), 
vec4(0.0, 0.975683867931, 0.18633890152, 0.3), vec4(0.0, 0.975683867931, 0.18633890152, -0.3), 
vec4(-0.927930414677, 0.301502913237, 0.186338871717, 0.3), vec4(-0.927930414677, 0.301502913237, 0.186338871717, -0.3), 
vec4(-0.573492586613, -0.789345026016, 0.186338797212, 0.3), vec4(-0.573492586613, -0.789345026016, 0.186338797212, -0.3), 
vec4(0.573492586613, -0.789345026016, 0.186338797212, 0.3), vec4(0.573492586613, -0.789345026016, 0.186338797212, -0.3), 
vec4(0.927930414677, 0.301502913237, 0.186338871717, 0.3), vec4(0.927930414677, 0.301502913237, 0.186338871717, -0.3), 
vec4(0.0, 0.603005826473, 0.78934442997, 0.3), vec4(0.0, 0.603005826473, 0.78934442997, -0.3), 
vec4(0.573492586613, 0.186338871717, 0.789344370365, 0.3), vec4(0.573492586613, 0.186338871717, 0.789344370365, -0.3), 
vec4(0.354437857866, -0.48784211278, 0.78934431076, 0.3), vec4(0.354437857866, -0.48784211278, 0.78934431076, -0.3), 
vec4(-0.354437857866, -0.48784211278, 0.78934431076, 0.3), vec4(-0.354437857866, -0.48784211278, 0.78934431076, -0.3), 
vec4(-0.573492586613, 0.186338871717, 0.789344370365, 0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, -0.3) );

#if HW_PERFORMANCE==0
#else
//#define AA
#endif

#define BIASED_NORMAL 	1
#define MAX_DIST		15.
const float PI = radians(180.);

#define THICKNESS	0.1
#define LIGHTHEIGHT	1.10
#define SCALE		1.7


mat4 rot4d;

void init4d()
{
	float a1 = iTime * 0.5;
	float a2 = iTime * 0.5;

    vec4 x = vec4(cos(a1), -sin(a1),     0.0,     0.0);
    vec4 y = vec4(sin(a1),  cos(a1),     0.0,     0.0);
    vec4 z = vec4(    0.0,      0.0, cos(a2), -sin(a2));
    vec4 w = vec4(    0.0,      0.0, sin(a2),  cos(a2));
    rot4d = mat4(x, y, z, w);
}

vec3 transform4d(vec4 p)
{
    p = rot4d * p;
	float a = LIGHTHEIGHT / (p.w - LIGHTHEIGHT);
    return p.xyz * a * SCALE;    
}

float sdCapsule( vec3 p, vec3 a, vec3 b, float r )
{
  vec3 pa = p - a, ba = b - a;
  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
  return length( pa - ba*h ) - r;
}

mat3 fromEuler(vec3 ang)
{
    mat3 mx = mat3(
			1.0,		0.0,		0.0,
			0.0,		cos(ang.x),	-sin(ang.x),
			0.0,		sin(ang.x),	cos(ang.x));
    mat3 my = mat3(
			cos(ang.y), 0.0,		sin(ang.y),
			0.0,		1.0,		0.0,
			-sin(ang.y),0.0,		cos(ang.y));
    mat3 mz = mat3(
			cos(ang.z), -sin(ang.z),0.0,
			sin(ang.z),	cos(ang.z),	0.0,
			0.0,		0.0,		1.0);
        
    return mx*my*mz;
}

const float k = 25.;

float map(vec3 p)
{
    p *= fromEuler(vec3(iTime * 0.12, iTime * 0.15, iTime * 0.136));
    float sminAcc = 0.;
    for( int i = 0; i < numVertices / 2; i++)
    {
        sminAcc += exp2(-k * sdCapsule(p, transform4d(vertices[i*2 + 0]), transform4d(vertices[i*2 + 1]), THICKNESS));
    }
	return -log2( sminAcc ) / k;
}

vec3 getSkyColor(vec3 rd)
{
    vec3 col = texture(iChannel0, rd).rgb;
    return col*col;
}


float rayMarch(in vec3 ro, in vec3 rd, in float offT)
{
  float t = offT;
  for (int i = 0; i < 40; i++)
  {
    float h = map(ro + rd * t);
    t += h;
    if (h < 0.001 || t > MAX_DIST)
        break;
  }
  return t;
}

#define EPS  0.01

#if BIASED_NORMAL
vec3 calcNormal(vec3 pos)
{
    float	ref;
    float	trans;
    vec3	absorb;
    vec3	col;
    vec2	eps = vec2(EPS, 0);
	float d = map(pos);
	return normalize(vec3(map(pos + eps.xyy) - d, map(pos + eps.yxy) - d, map(pos + eps.yyx) - d));
}
#else
vec3 calcNormal( in vec3 pos )
{
    const float ep = EPS;
    vec2 e = vec2(1.0,-1.0)*0.5773;
    return normalize( e.xyy*map( pos + e.xyy*ep ) + 
					  e.yyx*map( pos + e.yyx*ep ) + 
					  e.yxy*map( pos + e.yxy*ep ) + 
					  e.xxx*map( pos + e.xxx*ep ) );
}
#endif

vec3 applyFog(vec3 rgb,float distance, vec3 fogColor)
{
    float fogAmount = 1.0 - exp( -distance*0.2 );
    return mix( rgb, fogColor, fogAmount );
}


vec3 Render(in vec3 ro, in vec3 rd)
{
    float t = rayMarch(ro, rd, 4.);
    vec3	col = vec3(0.07);
    if(t < MAX_DIST)
    {
        vec3 p = ro + rd * t;
        vec3 n = calcNormal(p);   
        col = texture(iChannel0, reflect(rd, n)).rgb * pow(dot(rd, n), 2.);
        col = mix(col, vec3(dot(col, vec3( 1.0 / 3.0))), 0.5);		// Desaturate
        col = applyFog(col, t, vec3(0));
    }
    return col;
}

vec3 contrast( in vec3 color, in float c)
{
    float t = 0.5 - c * 0.5; 
    return color * c + t;
}

vec3 vignette(vec3 color, vec2 q, float v)
{
    color *= 0.3 + 0.8 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), v);
    return color;
}

vec3 postProcess(in vec3 col, in vec2 q)
{
	col = pow(col, vec3(0.8));
	col = contrast(col, 1.2);
	col = vignette(col, q, 0.8);
	return col;
}


mat3 setCamera( in vec3 ro, in vec3 ta )
{
	vec3 cw = normalize(ta-ro);
	vec3 up = vec3(0, 1, 0);
	vec3 cu = normalize( cross(cw,up) );
	vec3 cv = normalize( cross(cu,cw) );
    return mat3( cu, cv, cw );
}

void mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )
{
	init4d();
    fragColor = vec4(Render(ro + vec3(0.0, 0.0, 9.0), rd), 1);
}

vec4 mainImage( in vec2 fragCoord )
{   
	init4d();

    vec3 tot = vec3(0.0);
#ifdef AA
	vec2 rook[4];
    rook[0] = vec2( 1./8., 3./8.);
    rook[1] = vec2( 3./8.,-1./8.);
    rook[2] = vec2(-1./8.,-3./8.);
    rook[3] = vec2(-3./8., 1./8.);
    for( int n=0; n<4; ++n )
    {
        // pixel coordinates
        vec2 o = rook[n];
        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;
#else //AA
        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;
#endif //AA
 
        // camera
        float theta	= radians(360.)*(iMouse.x/iResolution.x-0.5) + PI * 0.3;
        float phi	= radians(90.)*(iMouse.y/iResolution.y-0.5) - PI / 2.;
        vec3 ro = 9. * vec3( sin(phi)*cos(theta),cos(phi),sin(phi)*sin(theta));
        vec3 ta = vec3( 0 );
        // camera-to-world transformation
        mat3 ca = setCamera( ro, ta );
        //vec3 cd = ca[2];    
        
        vec3 rd =  ca*normalize(vec3(p,1.5));        
        
        tot += Render(ro ,rd);
            
#ifdef AA
    }
    tot /= 4.;
#endif
        
    tot = postProcess(tot,fragCoord / iResolution.xy);
    
	return vec4( sqrt(tot), 1.0 );
}

void main() {
    vec2 pos = gl_FragCoord.xy;
    fragColor = mainImage(pos);
}